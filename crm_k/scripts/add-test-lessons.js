const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addTestLessons() {
  try {
    console.log('üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π...');

    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst({
      where: { email: 'teacher@test.com' }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å teacher@test.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–∞
    let student = await prisma.student.findFirst({
      where: { userId: user.id }
    });

    if (!student) {
      console.log('üë∂ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞...');
      student = await prisma.student.create({
        data: {
          fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫',
          phone: '+7 (999) 123-45-67',
          age: 8,
          diagnosis: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑',
          comment: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
          parentName: '–¢–µ—Å—Ç–æ–≤–∞—è –ú–∞–º–∞',
          userId: user.id
        }
      });
      console.log(`‚úÖ –£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ${student.fullName}`);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É—á–µ–Ω–∏–∫: ${student.fullName}`);
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è...');
    await prisma.lesson.deleteMany({
      where: {
        studentId: student.id,
        notes: { startsWith: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ' }
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    console.log('üìö –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è...');
    const now = new Date();
    let lessonsCreated = 0;
    
    for (let i = 0; i < 30; i++) {
      const lessonDate = new Date(now);
      lessonDate.setDate(now.getDate() - i);
      
      // –°–æ–∑–¥–∞–µ–º 1-3 –∑–∞–Ω—è—Ç–∏—è –≤ –¥–µ–Ω—å —Å —Ä–∞–∑–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
      const lessonsCount = Math.random() > 0.7 ? Math.floor(Math.random() * 3) + 1 : 0;
      
      for (let j = 0; j < lessonsCount; j++) {
        const lessonTime = new Date(lessonDate);
        lessonTime.setHours(10 + j * 2, 0, 0, 0);
        
        const isCompleted = Math.random() > 0.3; // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ
        const isPaid = isCompleted && Math.random() > 0.4; // 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–æ
        
        const endTime = new Date(lessonTime);
        endTime.setHours(lessonTime.getHours() + 1); // –ó–∞–Ω—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å

        await prisma.lesson.create({
          data: {
            date: lessonTime,
            endTime: endTime,
            studentId: student.id,
            cost: 2000 + Math.floor(Math.random() * 1000), // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 2000 –¥–æ 3000
            isCompleted,
            isPaid,
            isCancelled: false,
            notes: `–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ ${i + 1}-${j + 1}`
          }
        });
        lessonsCreated++;
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${lessonsCreated} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalLessons = await prisma.lesson.count({
      where: { studentId: student.id }
    });

    const paidLessons = await prisma.lesson.count({
      where: { 
        studentId: student.id,
        isCompleted: true,
        isPaid: true
      }
    });

    const totalRevenue = await prisma.lesson.aggregate({
      where: { 
        studentId: student.id,
        isCompleted: true,
        isPaid: true
      },
      _sum: { cost: true }
    });

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: ${totalLessons}`);
    console.log(`–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: ${paidLessons}`);
    console.log(`–û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalRevenue._sum.cost || 0} —Ç–µ–Ω–≥–µ`);

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestLessons();
