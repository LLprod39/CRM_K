const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function clearDatabase() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏...');
    await prisma.paymentLesson.deleteMany();
    await prisma.payment.deleteMany();

    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è...');
    await prisma.lesson.deleteMany();

    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤...');
    await prisma.student.deleteMany();

    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await prisma.user.deleteMany();

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞ —Å –ø–∞—Ä–æ–ª–µ–º 123456
    console.log('üë§ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const hashedPassword = await bcrypt.hash('123456', 12);
    
    const admin = await prisma.user.create({
      data: {
        email: 'admin@crm.com',
        password: hashedPassword,
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'ADMIN'
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:');
    console.log(`   Email: ${admin.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: 123456`);
    console.log(`   –†–æ–ª—å: ${admin.role}`);

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
    console.log('\nüìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('Email: admin@crm.com');
    console.log('–ü–∞—Ä–æ–ª—å: 123456');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

clearDatabase();