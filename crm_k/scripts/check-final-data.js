const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkFinalData() {
  try {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = await prisma.user.count();
    const totalStudents = await prisma.student.count();
    const totalLessons = await prisma.lesson.count();

    console.log('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`üë∂ –£—á–µ–Ω–∏–∫–æ–≤: ${totalStudents}`);
    console.log(`üìö –ó–∞–Ω—è—Ç–∏–π: ${totalLessons}`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–Ω—è—Ç–∏–π
    const lessonStats = await prisma.lesson.groupBy({
      by: ['status'],
      _count: { id: true },
      _sum: { cost: true }
    });

    console.log('\nüìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π:');
    lessonStats.forEach(stat => {
      console.log(`${stat.status}: ${stat._count.id} –∑–∞–Ω—è—Ç–∏–π, ${stat._sum.cost || 0} ‚Ç∏`);
    });

    const totalRevenue = lessonStats.reduce((sum, stat) => sum + (stat._sum.cost || 0), 0);
    console.log(`üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalRevenue} ‚Ç∏`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüë• –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    const users = await prisma.user.findMany({
      include: {
        students: {
          include: {
            lessons: true
          }
        }
      }
    });

    for (const user of users) {
      const paidLessons = user.students.flatMap(s => s.lessons).filter(l => l.status === 'PAID');
      const completedLessons = user.students.flatMap(s => s.lessons).filter(l => l.status === 'COMPLETED');
      const scheduledLessons = user.students.flatMap(s => s.lessons).filter(l => l.status === 'SCHEDULED');
      const cancelledLessons = user.students.flatMap(s => s.lessons).filter(l => l.status === 'CANCELLED');

      const revenue = paidLessons.reduce((sum, l) => sum + l.cost, 0);
      const debt = completedLessons.reduce((sum, l) => sum + l.cost, 0);

      console.log(`\n${user.name} (${user.email}):`);
      console.log(`  üë∂ –£—á–µ–Ω–∏–∫–æ–≤: ${user.students.length}`);
      console.log(`  üìö –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: ${user.students.flatMap(s => s.lessons).length}`);
      console.log(`  ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: ${paidLessons.length} (${revenue} ‚Ç∏)`);
      console.log(`  ‚è≥ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: ${completedLessons.length} (${debt} ‚Ç∏ –¥–æ–ª–≥)`);
      console.log(`  üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${scheduledLessons.length}`);
      console.log(`  ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: ${cancelledLessons.length}`);
    }

    // –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ
    console.log('\nüèÜ –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:');
    const topStudents = await prisma.student.findMany({
      include: {
        lessons: true,
        user: {
          select: {
            name: true
          }
        }
      }
    });

    const studentsWithRevenue = topStudents.map(student => {
      const paidLessons = student.lessons.filter(l => l.status === 'PAID');
      const revenue = paidLessons.reduce((sum, l) => sum + l.cost, 0);
      return {
        name: student.fullName,
        owner: student.user.name,
        revenue,
        lessons: paidLessons.length
      };
    }).sort((a, b) => b.revenue - a.revenue).slice(0, 5);

    studentsWithRevenue.forEach((student, index) => {
      console.log(`${index + 1}. ${student.name} (${student.owner}): ${student.revenue} ‚Ç∏ (${student.lessons} –∑–∞–Ω—è—Ç–∏–π)`);
    });

    console.log('\nüéâ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
    console.log('\nüîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('–ê–¥–º–∏–Ω: admin@crm.com / admin123');
    console.log('–£—á–∏—Ç–µ–ª—å 1: teacher1@test.com / teacher123');
    console.log('–£—á–∏—Ç–µ–ª—å 2: teacher2@test.com / teacher123');
    console.log('–£—á–∏—Ç–µ–ª—å 3: teacher3@test.com / teacher123');
    console.log('–¢–µ—Å—Ç–æ–≤—ã–π: user@test.com / user123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkFinalData();
