const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function updatePasswords() {
  try {
    console.log('üîê –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const newPassword = await bcrypt.hash('123456', 10)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
    const admin = await prisma.user.update({
      where: { email: 'admin@crm.com' },
      data: { password: newPassword }
    })
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', admin.email)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.update({
      where: { email: 'user@crm.com' },
      data: { password: newPassword }
    })
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', user.email)
    
    console.log('\nüéâ –ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    console.log('üìã –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log('üëë –ê–¥–º–∏–Ω: admin@crm.com / 123456')
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user@crm.com / 123456')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

updatePasswords()
