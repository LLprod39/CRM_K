const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addMoreFinancialData() {
  try {
    console.log('üí∞ –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
    const students = await prisma.student.findMany({
      include: {
        user: true
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: ${students.length}`);

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    const lessonStatuses = ['COMPLETED', 'PAID', 'SCHEDULED'];
    const costs = [1200, 1500, 1800, 2000, 2200, 2500, 2800, 3000];
    const notes = [
      '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏',
      '–†–µ–±–µ–Ω–æ–∫ –±—ã–ª –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º',
      '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–æ–º–∞',
      '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
      '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è',
      '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π',
      '–û—á–µ–Ω—å —Å—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π —É—á–µ–Ω–∏–∫',
      '–ë—ã—Å—Ç—Ä–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª',
      '–¢—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ'
    ];

    let addedLessons = 0;

    for (const student of students) {
      // –î–æ–±–∞–≤–ª—è–µ–º 5-10 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
      const additionalLessons = Math.floor(Math.random() * 6) + 5;
      
      for (let i = 0; i < additionalLessons; i++) {
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö
        const date = new Date();
        const daysAgo = Math.floor(Math.random() * 180); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        date.setDate(date.getDate() - daysAgo);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è (9:00 - 17:00)
        const hour = 9 + Math.floor(Math.random() * 8);
        const minute = Math.random() < 0.5 ? 0 : 30;
        date.setHours(hour, minute, 0, 0);

        const status = lessonStatuses[Math.floor(Math.random() * lessonStatuses.length)];
        const cost = costs[Math.floor(Math.random() * costs.length)];
        const note = Math.random() < 0.8 ? notes[Math.floor(Math.random() * notes.length)] : null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è
        const existingLesson = await prisma.lesson.findFirst({
          where: {
            studentId: student.id,
            date: date
          }
        });

        if (!existingLesson) {
          await prisma.lesson.create({
            data: {
              date: date,
              studentId: student.id,
              cost: cost,
              status: status,
              notes: note
            }
          });
          addedLessons++;
        }
      }
    }

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${addedLessons}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.lesson.groupBy({
      by: ['status'],
      _count: { id: true },
      _sum: { cost: true }
    });

    console.log('\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    stats.forEach(stat => {
      console.log(`${stat.status}: ${stat._count.id} –∑–∞–Ω—è—Ç–∏–π, ${stat._sum.cost || 0} ‚ÇΩ`);
    });

    const totalRevenue = stats.reduce((sum, stat) => sum + (stat._sum.cost || 0), 0);
    console.log(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue} ‚ÇΩ`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
    for (const student of students) {
      const userLessons = await prisma.lesson.findMany({
        where: {
          student: {
            userId: student.userId
          }
        }
      });

      const userRevenue = userLessons
        .filter(l => l.status === 'PAID')
        .reduce((sum, l) => sum + l.cost, 0);

      const userDebt = userLessons
        .filter(l => l.status === 'COMPLETED')
        .reduce((sum, l) => sum + l.cost, 0);

      console.log(`${student.user.name}: ${userLessons.length} –∑–∞–Ω—è—Ç–∏–π, ${userRevenue} ‚ÇΩ –≤—ã—Ä—É—á–∫–∞, ${userDebt} ‚ÇΩ –¥–æ–ª–≥`);
    }

    console.log('\nüéâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addMoreFinancialData();
