const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addTestStudents() {
  try {
    console.log('üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    if (users.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return;
    }

    // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    const testStudents = [
      {
        fullName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
        phone: '+7 (701) 111-11-11',
        age: 8,
        diagnosis: '–î–¶–ü',
        comment: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫, –ª—é–±–∏—Ç –º—É–∑—ã–∫—É',
        parentName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞'
      },
      {
        fullName: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        phone: '+7 (702) 222-22-22',
        age: 6,
        diagnosis: '–ê—É—Ç–∏–∑–º',
        comment: '–¢—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞',
        parentName: '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞'
      },
      {
        fullName: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
        phone: '+7 (703) 333-33-33',
        age: 9,
        diagnosis: '–ó–ü–†',
        comment: '–•–æ—Ä–æ—à–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å',
        parentName: '–û–ª—å–≥–∞ –°–∏–¥–æ—Ä–æ–≤–∞'
      },
      {
        fullName: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
        phone: '+7 (704) 444-44-44',
        age: 7,
        diagnosis: '–°–î–í–ì',
        comment: '–ù—É–∂–Ω—ã —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ –∑–∞–Ω—è—Ç–∏—è—Ö',
        parentName: '–ù–∞—Ç–∞–ª—å—è –ö–æ–∑–ª–æ–≤–∞'
      },
      {
        fullName: '–ú–∞–∫—Å–∏–º –í–æ–ª–∫–æ–≤',
        phone: '+7 (705) 555-55-55',
        age: 5,
        diagnosis: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏',
        comment: '–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –∑–≤—É–∫–æ–≤',
        parentName: '–ò—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞'
      },
      {
        fullName: '–°–æ—Ñ–∏—è –ú–æ—Ä–æ–∑–æ–≤–∞',
        phone: '+7 (706) 666-66-66',
        age: 8,
        diagnosis: '–î–¶–ü',
        comment: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
        parentName: '–¢–∞—Ç—å—è–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞'
      },
      {
        fullName: '–ê—Ä—Ç–µ–º –õ–µ–±–µ–¥–µ–≤',
        phone: '+7 (707) 777-77-77',
        age: 6,
        diagnosis: '–ê—É—Ç–∏–∑–º',
        comment: '–õ—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∏ –ª–µ–ø–∏—Ç—å',
        parentName: '–°–≤–µ—Ç–ª–∞–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞'
      },
      {
        fullName: '–ü–æ–ª–∏–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
        phone: '+7 (708) 888-88-88',
        age: 7,
        diagnosis: '–ó–ü–†',
        comment: '–£—Å–∏–¥—á–∏–≤–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è',
        parentName: '–ê–Ω–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞'
      },
      {
        fullName: '–ò–≤–∞–Ω –°–æ–∫–æ–ª–æ–≤',
        phone: '+7 (709) 999-99-99',
        age: 9,
        diagnosis: '–°–î–í–ì',
        comment: '–¢—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏',
        parentName: '–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞'
      },
      {
        fullName: '–í–∞—Ä–≤–∞—Ä–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
        phone: '+7 (710) 000-00-00',
        age: 6,
        diagnosis: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏',
        comment: '–ë—ã—Å—Ç—Ä–æ –æ—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞',
        parentName: '–ú–∞—Ä–∏–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞'
      },
      {
        fullName: '–ö–∏—Ä–∏–ª–ª –ü–æ–ø–æ–≤',
        phone: '+7 (711) 111-22-33',
        age: 8,
        diagnosis: '–î–¶–ü',
        comment: '–û—á–µ–Ω—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫',
        parentName: '–õ—é–¥–º–∏–ª–∞ –ü–æ–ø–æ–≤–∞'
      },
      {
        fullName: '–ê–ª–∏—Å–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        phone: '+7 (712) 222-33-44',
        age: 7,
        diagnosis: '–ê—É—Ç–∏–∑–º',
        comment: '–•–æ—Ä–æ—à–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
        parentName: '–ì–∞–ª–∏–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞'
      },
      {
        fullName: '–†–æ–º–∞–Ω –§–µ–¥–æ—Ä–æ–≤',
        phone: '+7 (713) 333-44-55',
        age: 5,
        diagnosis: '–ó–ü–†',
        comment: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏',
        parentName: '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –§–µ–¥–æ—Ä–æ–≤–∞'
      },
      {
        fullName: '–ú–∏–ª–∞–Ω–∞ –û—Ä–ª–æ–≤–∞',
        phone: '+7 (714) 444-55-66',
        age: 8,
        diagnosis: '–°–î–í–ì',
        comment: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –ª—é–±–∏—Ç –ø–µ—Ç—å',
        parentName: '–ò—Ä–∏–Ω–∞ –û—Ä–ª–æ–≤–∞'
      },
      {
        fullName: '–¢–∏–º–æ—Ñ–µ–π –ó–∞—Ö–∞—Ä–æ–≤',
        phone: '+7 (715) 555-66-77',
        age: 6,
        diagnosis: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏',
        comment: '–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–≤—è–∑–Ω–æ–π —Ä–µ—á—å—é',
        parentName: '–û–∫—Å–∞–Ω–∞ –ó–∞—Ö–∞—Ä–æ–≤–∞'
      }
    ];

    console.log(`üë∂ –°–æ–∑–¥–∞–µ–º ${testStudents.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤...`);

    let createdCount = 0;
    let existingCount = 0;

    for (const studentData of testStudents) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const existingStudent = await prisma.student.findFirst({
        where: {
          fullName: studentData.fullName
        }
      });

      if (existingStudent) {
        console.log(`‚ÑπÔ∏è  –£—á–µ–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${studentData.fullName}`);
        existingCount++;
        continue;
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
      const randomUser = users[Math.floor(Math.random() * users.length)];

      const student = await prisma.student.create({
        data: {
          ...studentData,
          userId: randomUser.id
        }
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —É—á–µ–Ω–∏–∫: ${student.fullName} (${studentData.diagnosis})`);
      createdCount++;
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: ${createdCount}`);
    console.log(`‚ÑπÔ∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${existingCount}`);
    console.log(`üìà –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${createdCount + existingCount}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º
    const allStudents = await prisma.student.findMany();
    const diagnosisStats = {};
    
    allStudents.forEach(student => {
      diagnosisStats[student.diagnosis] = (diagnosisStats[student.diagnosis] || 0) + 1;
    });

    console.log(`\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º:`);
    Object.entries(diagnosisStats).forEach(([diagnosis, count]) => {
      console.log(`${diagnosis}: ${count} —É—á–µ–Ω–∏–∫–æ–≤`);
    });

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestStudents();
