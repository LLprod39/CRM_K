const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedTestData() {
  try {
    console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
      {
        email: 'teacher1@test.com',
        password: await bcrypt.hash('teacher123', 12),
        name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
        role: 'USER'
      },
      {
        email: 'teacher2@test.com',
        password: await bcrypt.hash('teacher123', 12),
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        role: 'USER'
      },
      {
        email: 'teacher3@test.com',
        password: await bcrypt.hash('teacher123', 12),
        name: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
        role: 'USER'
      }
    ];

    console.log('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const createdUsers = [];
    for (const userData of users) {
      const existingUser = await prisma.user.findUnique({
        where: { email: userData.email }
      });

      if (!existingUser) {
        const user = await prisma.user.create({
          data: userData
        });
        createdUsers.push(user);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);
      } else {
        createdUsers.push(existingUser);
        console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingUser.name}`);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞)
    const allUsers = await prisma.user.findMany();
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);

    // –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const studentsData = [
      // –î–ª—è –∞–¥–º–∏–Ω–∞ (—É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
      {
        userId: allUsers.find(u => u.role === 'ADMIN').id,
        students: [
          {
            fullName: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            phone: '+7 (999) 123-45-67',
            age: 8,
            diagnosis: '–î–¶–ü',
            comment: '–¢—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –º–æ—Ç–æ—Ä–∏–∫–µ'
          },
          {
            fullName: '–°–æ—Ñ–∏—è –ö–æ–∑–ª–æ–≤–∞',
            phone: '+7 (999) 234-56-78',
            age: 6,
            diagnosis: '–ê—É—Ç–∏–∑–º',
            comment: '–•–æ—Ä–æ—à–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –º—É–∑—ã–∫—É'
          }
        ]
      },
      // –î–ª—è teacher1
      {
        userId: createdUsers[0]?.id || allUsers.find(u => u.email === 'teacher1@test.com')?.id,
        students: [
          {
            fullName: '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤',
            phone: '+7 (999) 345-67-89',
            age: 7,
            diagnosis: '–ó–ü–†',
            comment: '–ê–∫—Ç–∏–≤–Ω—ã–π, –ª—é–±–∏—Ç –∏–≥—Ä—ã'
          },
          {
            fullName: '–í–∞—Ä–≤–∞—Ä–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
            phone: '+7 (999) 456-78-90',
            age: 9,
            diagnosis: '–°–î–í–ì',
            comment: '–ù—É–∂–Ω—ã —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã'
          },
          {
            fullName: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
            phone: '+7 (999) 567-89-01',
            age: 5,
            diagnosis: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏',
            comment: '–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º'
          }
        ]
      },
      // –î–ª—è teacher2
      {
        userId: createdUsers[1]?.id || allUsers.find(u => u.email === 'teacher2@test.com')?.id,
        students: [
          {
            fullName: '–ê–ª–∏—Å–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
            phone: '+7 (999) 678-90-12',
            age: 8,
            diagnosis: '–î–¶–ü',
            comment: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
          },
          {
            fullName: '–ú–∞–∫—Å–∏–º –õ–µ–±–µ–¥–µ–≤',
            phone: '+7 (999) 789-01-23',
            age: 6,
            diagnosis: '–ê—É—Ç–∏–∑–º',
            comment: '–õ—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å'
          }
        ]
      },
      // –î–ª—è teacher3
      {
        userId: createdUsers[2]?.id || allUsers.find(u => u.email === 'teacher3@test.com')?.id,
        students: [
          {
            fullName: '–ü–æ–ª–∏–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞',
            phone: '+7 (999) 890-12-34',
            age: 7,
            diagnosis: '–ó–ü–†',
            comment: '–£—Å–∏–¥—á–∏–≤–∞—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è'
          },
          {
            fullName: '–ê—Ä—Ç–µ–º –ö—É–∑–Ω–µ—Ü–æ–≤',
            phone: '+7 (999) 901-23-45',
            age: 10,
            diagnosis: '–°–î–í–ì',
            comment: '–¢—Ä–µ–±—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞'
          },
          {
            fullName: '–ú–∏–ª–∞–Ω–∞ –ü–æ–ø–æ–≤–∞',
            phone: '+7 (999) 012-34-56',
            age: 6,
            diagnosis: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—á–∏',
            comment: '–ë—ã—Å—Ç—Ä–æ –æ—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞'
          }
        ]
      }
    ];

    console.log('üë∂ –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤...');
    const allStudents = [];
    for (const userData of studentsData) {
      if (!userData.userId) continue;

      for (const studentData of userData.students) {
        const existingStudent = await prisma.student.findFirst({
          where: {
            fullName: studentData.fullName,
            userId: userData.userId
          }
        });

        if (!existingStudent) {
          const student = await prisma.student.create({
            data: {
              ...studentData,
              userId: userData.userId
            }
          });
          allStudents.push(student);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —É—á–µ–Ω–∏–∫: ${student.fullName}`);
        } else {
          allStudents.push(existingStudent);
        }
      }
    }

    console.log(`üìä –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: ${allStudents.length}`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    console.log('üìö –°–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è...');
    const lessonStatuses = ['SCHEDULED', 'COMPLETED', 'PAID', 'CANCELLED'];
    const costs = [1500, 2000, 2500, 3000];
    const notes = [
      '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
      '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      '–†–µ–±–µ–Ω–æ–∫ —É—Å—Ç–∞–ª',
      '–û—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π',
      '–¢—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
      '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π',
      '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è'
    ];

    let totalLessons = 0;
    for (const student of allStudents) {
      // –°–æ–∑–¥–∞–µ–º 8-15 –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
      const lessonsCount = Math.floor(Math.random() * 8) + 8;
      
      for (let i = 0; i < lessonsCount; i++) {
        const date = new Date();
        date.setDate(date.getDate() - Math.floor(Math.random() * 90)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
        date.setHours(9 + Math.floor(Math.random() * 8), Math.random() < 0.5 ? 0 : 30, 0, 0);

        const status = lessonStatuses[Math.floor(Math.random() * lessonStatuses.length)];
        const cost = costs[Math.floor(Math.random() * costs.length)];
        const note = notes[Math.floor(Math.random() * notes.length)];

        const existingLesson = await prisma.lesson.findFirst({
          where: {
            studentId: student.id,
            date: date
          }
        });

        if (!existingLesson) {
          await prisma.lesson.create({
            data: {
              date: date,
              studentId: student.id,
              cost: cost,
              status: status,
              notes: Math.random() < 0.7 ? note : null
            }
          });
          totalLessons++;
        }
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${totalLessons}`);

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await prisma.lesson.groupBy({
      by: ['status'],
      _count: { id: true },
      _sum: { cost: true }
    });

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π:');
    stats.forEach(stat => {
      console.log(`${stat.status}: ${stat._count.id} –∑–∞–Ω—è—Ç–∏–π, ${stat._sum.cost || 0} ‚ÇΩ`);
    });

    const totalRevenue = stats.reduce((sum, stat) => sum + (stat._sum.cost || 0), 0);
    console.log(`üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue} ‚ÇΩ`);

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('–ê–¥–º–∏–Ω: admin@crm.com / admin123');
    console.log('–£—á–∏—Ç–µ–ª—å 1: teacher1@test.com / teacher123');
    console.log('–£—á–∏—Ç–µ–ª—å 2: teacher2@test.com / teacher123');
    console.log('–£—á–∏—Ç–µ–ª—å 3: teacher3@test.com / teacher123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedTestData();
