const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAISetup() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä—É—à–µ–∫
    const toysCount = await prisma.toy.count();
    console.log(`‚úÖ –ò–≥—Ä—É—à–∫–∏ –≤ –±–∞–∑–µ: ${toysCount}`);

    if (toysCount > 0) {
      const toys = await prisma.toy.findMany({ take: 3 });
      console.log('üì¶ –ü—Ä–∏–º–µ—Ä—ã –∏–≥—Ä—É—à–µ–∫:');
      toys.forEach(toy => {
        console.log(`   - ${toy.name} (${toy.category || '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ–Ω–∏–∫–æ–≤
    const studentsCount = await prisma.student.count();
    console.log(`\nüë• –£—á–µ–Ω–∏–∫–∏ –≤ –±–∞–∑–µ: ${studentsCount}`);

    if (studentsCount > 0) {
      const students = await prisma.student.findMany({ 
        take: 3,
        include: {
          lessons: {
            where: { isCompleted: true },
            take: 2
          }
        }
      });
      console.log('üéì –ü—Ä–∏–º–µ—Ä—ã —É—á–µ–Ω–∏–∫–æ–≤:');
      students.forEach(student => {
        console.log(`   - ${student.fullName} (${student.age} –ª–µ—Ç, ${student.lessons.length} –∑–∞–Ω—è—Ç–∏–π)`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–∏—è
    const lessonsCount = await prisma.lesson.count();
    console.log(`\nüìö –ó–∞–Ω—è—Ç–∏—è –≤ –±–∞–∑–µ: ${lessonsCount}`);

    console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò!');
    console.log('\nüìã –ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ª—é–±–æ–≥–æ —É—á–µ–Ω–∏–∫–∞');
    console.log('2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –æ—Ç –ò–ò"');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω"');
    console.log('4. –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ò–≥—Ä—É—à–∫–∏"');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAISetup();
