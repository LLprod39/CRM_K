const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const hashedPassword = await bcrypt.hash('teacher123', 12);
    
    const user = await prisma.user.create({
      data: {
        email: 'teacher@test.com',
        password: hashedPassword,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–∏—Ç–µ–ª—å',
        role: 'USER'
      }
    });

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.name} (${user.email})`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    console.log('üë∂ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞...');
    const student = await prisma.student.create({
      data: {
        fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –£—á–µ–Ω–∏–∫',
        phone: '+7 (999) 123-45-67',
        age: 8,
        diagnosis: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑',
        comment: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        userId: user.id
      }
    });

    console.log(`‚úÖ –£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ${student.fullName}`);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    console.log('üìö –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è...');
    const now = new Date();
    
    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ (–∑–∞–≤—Ç—Ä–∞)
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0);

    await prisma.lesson.create({
      data: {
        date: tomorrow,
        studentId: student.id,
        cost: 2000,
        isCompleted: false,
        isPaid: false,
        isCancelled: false,
        notes: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
      }
    });

    // –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ (–≤—á–µ—Ä–∞)
    const yesterday = new Date(now);
    yesterday.setDate(now.getDate() - 1);
    yesterday.setHours(14, 0, 0, 0);

    await prisma.lesson.create({
      data: {
        date: yesterday,
        studentId: student.id,
        cost: 2000,
        isCompleted: true,
        isPaid: false,
        isCancelled: false,
        notes: '–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
      }
    });

    // –û–ø–ª–∞—á–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ (–ø–æ–∑–∞–≤—á–µ—Ä–∞)
    const dayBeforeYesterday = new Date(now);
    dayBeforeYesterday.setDate(now.getDate() - 2);
    dayBeforeYesterday.setHours(16, 0, 0, 0);

    await prisma.lesson.create({
      data: {
        date: dayBeforeYesterday,
        studentId: student.id,
        cost: 2000,
        isCompleted: true,
        isPaid: true,
        isCancelled: false,
        notes: '–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ + –û–ø–ª–∞—á–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'
      }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã');

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('–ê–¥–º–∏–Ω: admin@crm.com / 123456');
    console.log('–£—á–∏—Ç–µ–ª—å: teacher@test.com / teacher123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestData();
