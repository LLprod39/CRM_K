const fetch = require('node-fetch');

async function testAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...\n');

    // –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
    console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...');
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'admin@crm.com',
        password: 'admin123'
      })
    });

    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω:', loginData.name);
      
      const token = loginData.token;
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤
      console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤...');
      const studentsResponse = await fetch('http://localhost:3000/api/students', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (studentsResponse.ok) {
        const students = await studentsResponse.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: ${students.length}`);
        students.forEach(student => {
          console.log(`  - ${student.fullName} (${student.user?.name || '–ë–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞'})`);
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤:', await studentsResponse.text());
      }

      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
      console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π...');
      const lessonsResponse = await fetch('http://localhost:3000/api/lessons', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (lessonsResponse.ok) {
        const lessons = await lessonsResponse.json();
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${lessons.length}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π:', await lessonsResponse.text());
      }

      // –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const financesResponse = await fetch('http://localhost:3000/api/finances/stats', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (financesResponse.ok) {
        const finances = await financesResponse.json();
        console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
        console.log(`  - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${finances.totalRevenue} ‚Ç∏`);
        console.log(`  - –û–±—â–∏–π –¥–æ–ª–≥: ${finances.totalDebt} ‚Ç∏`);
        console.log(`  - –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: ${finances.totalPrepaid} ‚Ç∏`);
        console.log(`  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:`);
        finances.statusStats.forEach(stat => {
          console.log(`    ${stat.status}: ${stat.count} –∑–∞–Ω—è—Ç–∏–π, ${stat.totalCost} ‚Ç∏`);
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤:', await financesResponse.text());
      }

      // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
      console.log('\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤...');
      const autoUpdateResponse = await fetch('http://localhost:3000/api/lessons/auto-update-status', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      if (autoUpdateResponse.ok) {
        const updateData = await autoUpdateResponse.json();
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:');
        console.log(`  - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${updateData.updatedCount}`);
        if (updateData.results && updateData.results.length > 0) {
          console.log('  - –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
          updateData.results.slice(0, 3).forEach(result => {
            console.log(`    ${result.studentName}: ${result.oldStatus} -> ${result.newStatus}`);
          });
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', await autoUpdateResponse.text());
      }

    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', await loginResponse.text());
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
setTimeout(testAPI, 3000);
