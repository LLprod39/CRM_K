const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixStudentDistribution() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    const admin = users.find(u => u.role === 'ADMIN');
    const teachers = users.filter(u => u.role === 'USER');

    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length} (1 –∞–¥–º–∏–Ω, ${teachers.length} —É—á–∏—Ç–µ–ª–µ–π)`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
    const students = await prisma.student.findMany();
    console.log(`üë∂ –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: ${students.length}`);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É —É—á–∏—Ç–µ–ª—è–º–∏
    const studentsPerTeacher = Math.ceil(students.length / teachers.length);
    
    for (let i = 0; i < teachers.length; i++) {
      const teacher = teachers[i];
      const startIndex = i * studentsPerTeacher;
      const endIndex = Math.min(startIndex + studentsPerTeacher, students.length);
      const teacherStudents = students.slice(startIndex, endIndex);

      console.log(`üë®‚Äçüè´ ${teacher.name}: ${teacherStudents.length} —É—á–µ–Ω–∏–∫–æ–≤`);

      for (const student of teacherStudents) {
        await prisma.student.update({
          where: { id: student.id },
          data: { userId: teacher.id }
        });
      }
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ —É –∞–¥–º–∏–Ω–∞
    const adminStudents = students.slice(0, 3);
    for (const student of adminStudents) {
      await prisma.student.update({
        where: { id: student.id },
        data: { userId: admin.id }
      });
    }

    console.log(`‚úÖ –ê–¥–º–∏–Ω –æ—Å—Ç–∞–≤–∏–ª —Å–µ–±–µ: ${adminStudents.length} —É—á–µ–Ω–∏–∫–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:');
    for (const user of users) {
      const userStudents = await prisma.student.findMany({
        where: { userId: user.id }
      });

      const userLessons = await prisma.lesson.findMany({
        where: {
          student: {
            userId: user.id
          }
        }
      });

      const userRevenue = userLessons
        .filter(l => l.status === 'PAID')
        .reduce((sum, l) => sum + l.cost, 0);

      const userDebt = userLessons
        .filter(l => l.status === 'COMPLETED')
        .reduce((sum, l) => sum + l.cost, 0);

      console.log(`${user.name}: ${userStudents.length} —É—á–µ–Ω–∏–∫–æ–≤, ${userLessons.length} –∑–∞–Ω—è—Ç–∏–π, ${userRevenue} ‚ÇΩ –≤—ã—Ä—É—á–∫–∞, ${userDebt} ‚ÇΩ –¥–æ–ª–≥`);
    }

    console.log('\nüéâ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixStudentDistribution();
