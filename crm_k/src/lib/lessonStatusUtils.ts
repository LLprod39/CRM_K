/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π
 */

export type LessonStatus = 
  | 'scheduled'      // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
  | 'prepaid'        // –ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–æ
  | 'cancelled'      // –û—Ç–º–µ–Ω–µ–Ω–æ
  | 'completed'      // –ü—Ä–æ–≤–µ–¥–µ–Ω–æ
  | 'paid'           // –û–ø–ª–∞—á–µ–Ω–æ
  | 'debt'           // –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
  | 'unpaid';        // –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ

export interface LessonStatusInfo {
  status: LessonStatus;
  label: string;
  description: string;
  color: string;
  bgColor: string;
  icon: string;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–Ω—è—Ç–∏—è
 */
export function getLessonStatusInfo(
  isCompleted: boolean,
  isPaid: boolean,
  isCancelled: boolean,
  lessonDate?: Date
): LessonStatusInfo {
  // –û—Ç–º–µ–Ω–µ–Ω–æ
  if (isCancelled) {
    return {
      status: 'cancelled',
      label: '–û—Ç–º–µ–Ω–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      color: 'text-red-700',
      bgColor: 'bg-red-100',
      icon: '‚ùå'
    };
  }

  // –ü—Ä–æ–≤–µ–¥–µ–Ω–æ
  if (isCompleted) {
    if (isPaid) {
      return {
        status: 'paid',
        label: '–û–ø–ª–∞—á–µ–Ω–æ',
        description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ',
        color: 'text-green-700',
        bgColor: 'bg-green-100',
        icon: '‚úÖ'
      };
    } else {
      return {
        status: 'debt',
        label: '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å',
        description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ',
        color: 'text-orange-700',
        bgColor: 'bg-orange-100',
        icon: '‚ö†Ô∏è'
      };
    }
  }

  // –ù–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ
  if (isPaid) {
    return {
      status: 'prepaid',
      label: '–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-blue-700',
      bgColor: 'bg-blue-100',
      icon: 'üí≥'
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
  if (lessonDate && new Date() > lessonDate) {
    return {
      status: 'unpaid',
      label: '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-yellow-700',
      bgColor: 'bg-yellow-100',
      icon: '‚è∞'
    };
  }

  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
  return {
    status: 'scheduled',
    label: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
    description: '–ó–∞–Ω—è—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
    color: 'text-gray-700',
    bgColor: 'bg-gray-100',
    icon: 'üìÖ'
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
 */
export function getAllLessonStatuses(): LessonStatusInfo[] {
  return [
    {
      status: 'scheduled',
      label: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      color: 'text-gray-700',
      bgColor: 'bg-gray-100',
      icon: 'üìÖ'
    },
    {
      status: 'prepaid',
      label: '–ü—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-blue-700',
      bgColor: 'bg-blue-100',
      icon: 'üí≥'
    },
    {
      status: 'completed',
      label: '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ',
      color: 'text-indigo-700',
      bgColor: 'bg-indigo-100',
      icon: 'üéØ'
    },
    {
      status: 'paid',
      label: '–û–ø–ª–∞—á–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-green-700',
      bgColor: 'bg-green-100',
      icon: '‚úÖ'
    },
    {
      status: 'debt',
      label: '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-orange-700',
      bgColor: 'bg-orange-100',
      icon: '‚ö†Ô∏è'
    },
    {
      status: 'unpaid',
      label: '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ',
      color: 'text-yellow-700',
      bgColor: 'bg-yellow-100',
      icon: '‚è∞'
    },
    {
      status: 'cancelled',
      label: '–û—Ç–º–µ–Ω–µ–Ω–æ',
      description: '–ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
      color: 'text-red-700',
      bgColor: 'bg-red-100',
      icon: '‚ùå'
    }
  ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ
 */
export function canCancelLesson(lessonDate: Date, hoursBeforeLesson: number = 5): boolean {
  const now = new Date();
  const timeDiff = lessonDate.getTime() - now.getTime();
  const hoursDiff = timeDiff / (1000 * 60 * 60);
  
  return hoursDiff >= hoursBeforeLesson;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è
 */
export function getCancellationInfo(lessonDate: Date, cost: number) {
  const canCancel = canCancelLesson(lessonDate);
  
  return {
    canCancel,
    refundType: canCancel ? 'prepaid' : 'income',
    refundDescription: canCancel 
      ? '–°—É–º–º–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É —É—á–µ–Ω–∏–∫–∞'
      : '–°—É–º–º–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ—Ö–æ–¥',
    hoursBeforeLesson: Math.floor((lessonDate.getTime() - new Date().getTime()) / (1000 * 60 * 60))
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–Ω—è—Ç–∏–π
 */
export function getLessonStatusStats(lessons: Array<{
  isCompleted: boolean;
  isPaid: boolean;
  isCancelled: boolean;
  date: Date;
  cost: number;
}>) {
  const stats = {
    scheduled: 0,
    prepaid: 0,
    completed: 0,
    paid: 0,
    debt: 0,
    unpaid: 0,
    cancelled: 0,
    totalRevenue: 0,
    totalDebt: 0,
    totalPrepaid: 0
  };

  lessons.forEach(lesson => {
    const statusInfo = getLessonStatusInfo(
      lesson.isCompleted,
      lesson.isPaid,
      lesson.isCancelled,
      lesson.date
    );

    stats[statusInfo.status]++;

    // –ü–æ–¥—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    if (statusInfo.status === 'paid') {
      stats.totalRevenue += lesson.cost;
    } else if (statusInfo.status === 'debt' || statusInfo.status === 'unpaid') {
      stats.totalDebt += lesson.cost;
    } else if (statusInfo.status === 'prepaid') {
      stats.totalPrepaid += lesson.cost;
    }
  });

  return stats;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–Ω—è—Ç–∏—è
 */
export function getNextPossibleStatuses(
  isCompleted: boolean,
  isPaid: boolean,
  isCancelled: boolean,
  lessonDate?: Date
): LessonStatus[] {
  const currentStatus = getLessonStatusInfo(isCompleted, isPaid, isCancelled, lessonDate);
  
  switch (currentStatus.status) {
    case 'scheduled':
      return ['prepaid', 'completed', 'cancelled'];
    case 'prepaid':
      return ['completed', 'cancelled'];
    case 'completed':
      return ['paid', 'debt'];
    case 'debt':
      return ['paid'];
    case 'unpaid':
      return ['paid', 'debt'];
    case 'paid':
      return []; // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    case 'cancelled':
      return []; // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    default:
      return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
 */
export function isValidStatusTransition(
  fromStatus: LessonStatus,
  toStatus: LessonStatus
): boolean {
  const validTransitions: Record<LessonStatus, LessonStatus[]> = {
    scheduled: ['prepaid', 'completed', 'cancelled'],
    prepaid: ['completed', 'cancelled'],
    completed: ['paid', 'debt'],
    debt: ['paid'],
    unpaid: ['paid', 'debt'],
    paid: [],
    cancelled: []
  };

  return validTransitions[fromStatus]?.includes(toStatus) || false;
}
