import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
  const students = await Promise.all([
    prisma.student.create({
      data: {
        fullName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        phone: '+7 (999) 123-45-67',
        age: 8,
        diagnosis: '–î–¶–ü',
        comment: '–¢—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –º–æ—Ç–æ—Ä–∏–∫–µ'
      }
    }),
    prisma.student.create({
      data: {
        fullName: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        phone: '+7 (999) 234-56-78',
        age: 10,
        diagnosis: '–ê—É—Ç–∏–∑–º',
        comment: '–•–æ—Ä–æ—à–æ –∏–¥–µ—Ç –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç'
      }
    }),
    prisma.student.create({
      data: {
        fullName: '–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
        phone: '+7 (999) 345-67-89',
        age: 7,
        diagnosis: '–ó–ü–†',
        comment: '–ê–∫—Ç–∏–≤–Ω—ã–π, –ª—é–±–∏—Ç –∏–≥—Ä—ã'
      }
    }),
    prisma.student.create({
      data: {
        fullName: '–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞',
        phone: '+7 (999) 456-78-90',
        age: 9,
        diagnosis: '–°–î–í–ì',
        comment: '–ù—É–∂–Ω—ã —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã'
      }
    }),
    prisma.student.create({
      data: {
        fullName: '–ú–æ—Ä–æ–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
        phone: '+7 (999) 567-89-01',
        age: 11,
        diagnosis: '–î–¶–ü',
        comment: '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ—á–∏'
      }
    })
  ])

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${students.length} —É—á–µ–Ω–∏–∫–æ–≤`)

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
  const now = new Date()
  const lessons = []

  // –ó–∞–Ω—è—Ç–∏—è –Ω–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
  for (let i = 0; i < 5; i++) {
    const date = new Date(now)
    date.setDate(date.getDate() - 7 - i)
    date.setHours(10 + i, 0, 0, 0)

    lessons.push(
      prisma.lesson.create({
        data: {
          date,
          studentId: students[i % students.length].id,
          cost: 1500 + (i * 100),
          status: 'PAID',
          notes: `–ó–∞–Ω—è—Ç–∏–µ ${i + 1} - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –º–æ—Ç–æ—Ä–∏–∫–æ–π`
        }
      })
    )
  }

  // –ó–∞–Ω—è—Ç–∏—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
  for (let i = 0; i < 3; i++) {
    const date = new Date(now)
    date.setDate(date.getDate() - 3 + i)
    date.setHours(14 + i, 0, 0, 0)

    lessons.push(
      prisma.lesson.create({
        data: {
          date,
          studentId: students[i % students.length].id,
          cost: 1600 + (i * 50),
          status: 'COMPLETED',
          notes: `–ó–∞–Ω—è—Ç–∏–µ ${i + 1} - —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏`
        }
      })
    )
  }

  // –ë—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
  for (let i = 0; i < 4; i++) {
    const date = new Date(now)
    date.setDate(date.getDate() + 1 + i)
    date.setHours(9 + i, 0, 0, 0)

    lessons.push(
      prisma.lesson.create({
        data: {
          date,
          studentId: students[i % students.length].id,
          cost: 1700 + (i * 75),
          status: 'SCHEDULED',
          notes: `–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ ${i + 1}`
        }
      })
    )
  }

  await Promise.all(lessons)
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${lessons.length} –∑–∞–Ω—è—Ç–∏–π`)

  console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!')
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
