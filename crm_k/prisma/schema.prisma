// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Связь с учениками (один пользователь может иметь много учеников)
  students  Student[]
  
  // Связь с временем обеда
  lunchBreaks LunchBreak[]
  
  // Связь с гибкими абонементами
  flexibleSubscriptions FlexibleSubscription[]
  
  @@map("users")
}

// Роли пользователей
enum UserRole {
  ADMIN  // Администратор - видит все данные
  USER   // Обычный пользователь - видит только своих учеников
}

// Модель ученика
model Student {
  id          Int      @id @default(autoincrement())
  fullName    String   // ФИО
  phone       String   // Телефон родителей
  age         Int      // Возраст
  parentName  String   // ФИО родителя (обязательно)
  diagnosis   String?  // Диагноз (опционально)
  comment     String?  // Комментарий (опционально)
  photoUrl    String?  // URL фото ученика (опционально)
  userId      Int      // ID пользователя-владельца
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связь с пользователем
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Связь с занятиями
  lessons     Lesson[]
  
  // Связь с платежами
  payments    Payment[]
  
  // Связь с предложениями ИИ
  aiSuggestions AISuggestion[]
  
  // Связь с гибкими абонементами
  flexibleSubscriptions FlexibleSubscription[]
  
  @@map("students")
}

// Модель занятия
model Lesson {
  id          Int      @id @default(autoincrement())
  date        DateTime // Дата и время начала занятия
  endTime     DateTime // Дата и время окончания занятия
  studentId   Int      // ID ученика
  cost        Float    // Стоимость занятия
  isCompleted Boolean  @default(false) // Проведено ли занятие
  isPaid      Boolean  @default(false) // Оплачено ли занятие
  isCancelled Boolean  @default(false) // Отменено ли занятие
  notes       String?  // Заметки к занятию
  comment     String?  // Комментарий о поведении ребенка на занятии
  lessonType  String   @default("individual") // Тип занятия: individual, group
  location    String   @default("office") // Место проведения: office, online, home
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связь с учеником
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Связь с платежами
  payments    PaymentLesson[]
  
  @@map("lessons")
}


// Модель платежа
model Payment {
  id          Int      @id @default(autoincrement())
  studentId   Int      // ID ученика
  amount      Float    // Сумма платежа
  date        DateTime // Дата платежа
  description String?  // Описание платежа
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связь с учеником
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  // Связь с уроками через промежуточную таблицу
  lessons     PaymentLesson[]
  
  @@map("payments")
}

// Промежуточная таблица для связи платежей и уроков
model PaymentLesson {
  id        Int     @id @default(autoincrement())
  paymentId Int     // ID платежа
  lessonId  Int     // ID урока
  
  // Связи
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([paymentId, lessonId])
  @@map("payment_lessons")
}

// Модель игрушек
model Toy {
  id          Int      @id @default(autoincrement())
  name        String   // Название игрушки
  description String?  // Описание игрушки
  category    String?  // Категория игрушки (развивающие, сенсорные, моторные и т.д.)
  isAvailable Boolean  @default(true) // Доступна ли игрушка
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("toys")
}

// Модель предложений ИИ
model AISuggestion {
  id          Int      @id @default(autoincrement())
  studentId   Int      // ID ученика
  title       String   // Название занятия
  duration    String   // Продолжительность
  goals       String   // JSON массив целей
  materials   String   // JSON массив материалов
  structure   String   // JSON структура занятия
  recommendations String // JSON массив рекомендаций
  expectedResults String // JSON массив ожидаемых результатов
  notes       String?  // Дополнительные заметки
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связь с учеником
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("ai_suggestions")
}

// Модель времени обеда
model LunchBreak {
  id        Int      @id @default(autoincrement())
  date      DateTime // Дата обеда (только дата, время не важно)
  startTime DateTime // Время начала обеда
  endTime   DateTime // Время окончания обеда
  userId    Int      // ID пользователя (чтобы каждый пользователь мог иметь свое время обеда)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Связь с пользователем
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([date, userId]) // Один обед в день на пользователя
  @@map("lunch_breaks")
}

// Модель гибкого абонемента
model FlexibleSubscription {
  id          Int      @id @default(autoincrement())
  name        String   // Название абонемента
  studentId   Int      // ID ученика
  userId      Int      // ID пользователя-владельца
  startDate   DateTime // Дата начала абонемента
  endDate     DateTime // Дата окончания абонемента
  totalCost   Float    // Общая стоимость абонемента
  isPaid      Boolean  @default(false) // Оплачен ли абонемент
  description String?  // Описание абонемента
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связи
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Связь с расписанием недель
  weekSchedules FlexibleSubscriptionWeek[]
  
  // Связь с платежами
  payments    FlexibleSubscriptionPayment[]
  
  @@map("flexible_subscriptions")
}

// Модель расписания недели для гибкого абонемента
model FlexibleSubscriptionWeek {
  id                Int      @id @default(autoincrement())
  subscriptionId   Int      // ID абонемента
  weekNumber        Int      // Номер недели (1, 2, 3, ...)
  startDate         DateTime // Дата начала недели
  endDate           DateTime // Дата окончания недели
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Связи
  subscription      FlexibleSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  // Связь с днями недели
  weekDays          FlexibleSubscriptionDay[]
  
  @@map("flexible_subscription_weeks")
}

// Модель дня недели для гибкого абонемента
model FlexibleSubscriptionDay {
  id                Int      @id @default(autoincrement())
  weekId            Int      // ID недели
  dayOfWeek         Int      // День недели (0=воскресенье, 1=понедельник, ..., 6=суббота)
  startTime         DateTime // Время начала занятия
  endTime           DateTime // Время окончания занятия
  cost              Float    // Стоимость занятия
  location          String   @default("office") // Место проведения
  notes             String?  // Заметки к занятию
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Связи
  week              FlexibleSubscriptionWeek @relation(fields: [weekId], references: [id], onDelete: Cascade)
  
  @@map("flexible_subscription_days")
}

// Модель платежа для гибкого абонемента
model FlexibleSubscriptionPayment {
  id                Int      @id @default(autoincrement())
  subscriptionId   Int      // ID абонемента
  amount            Float    // Сумма платежа
  date              DateTime // Дата платежа
  description       String?  // Описание платежа
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Связи
  subscription      FlexibleSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("flexible_subscription_payments")
}